plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'application'
//    id 'jacoco'
//    id 'checkstyle'
    id 'org.liquibase.gradle' version '2.0.4'
    id 'checkstyle'
    id 'jacoco'
}

group = 'krylov'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-java8time:3.0.4.RELEASE'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

    // set dependency for liquibase plugin
    liquibaseRuntime 'org.liquibase:liquibase-core:4.15.0'
    liquibaseRuntime 'org.springframework.boot:spring-boot-starter-data-jpa'
    liquibaseRuntime 'org.liquibase.ext:liquibase-hibernate5:4.15.0'
    liquibaseRuntime sourceSets.main.output

    // connect querydsl
    implementation 'com.querydsl:querydsl-core:5.0.0'
    implementation 'com.querydsl:querydsl-jpa:5.0.0'
    // for forming Q-class
    annotationProcessor(
            'com.querydsl:querydsl-apt:5.0.0:jpa',
            'javax.annotation:javax.annotation-api:1.3.2',
            'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final'
    )

    compileOnly 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5',
            // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
            //'org.bouncycastle:bcprov-jdk15on:1.70',
            'io.jsonwebtoken:jjwt-jackson:0.11.5' // or 'io.jsonwebtoken:jjwt-gson:0.11.5' for gson

    // for auto filing database
//    testImplementation 'com.github.database-rider:rider-spring:1.35.0'
    testImplementation 'com.github.database-rider:rider-junit5:1.35.0'
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    jacoco {
        enabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

// settings Liquibase
liquibase {
    activities {
        main {
            // set path, where will be file migrations
            changeLogFile 'src/main/resources/db/changelog/changelog-XX.yaml'
            // set db for comparison our models
            url 'jdbc:h2:file:./src/main/resources/db/myDB/myDB'
            username 'sa'
            password ''
            // compare with models in package
            referenceUrl 'hibernate:spring:krylov.psychology' +
                    // set dialect
                    '?dialect=org.hibernate.dialect.H2Dialect' +
                    // set rules naming tables and columns,
                    // that they correspond Spring rules
                    '&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy'
        }
    }
}

// setting task diffChangeLog for generating migrations before each changing models,
diffChangeLog {
    dependsOn compileJava
}

tasks.named('test') {
	useJUnitPlatform()
}
